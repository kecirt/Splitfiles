#!/usr/local/bin/python3import csvimport platformimport sysimport timeimport os.pathfrom pathlib import Pathfrom datetime import datefrom termcolor import cprint"""Will create a folder with different files containing information based on the asn field.Synopsis:$ python splitfiles.py <file.csv>$ python splitfiles.py <file1.csv> <file2.csv> <file3.csv> ....."""# ASNs and the associated ISPsasn_names = {    9129: "mtn", 12455: "telkom", 12556: "is",    15399: "wananchi", 15808: "accesskenya", 25568: "kenyaweb",    33771: "safaricom(1)", 36866: "jtl", 36914: "kenet",    36915: "iwayafrica", 37061: "safaricom(2)",    37100: "seacom", 37027: "simbanet", 37156: "xtranet",    37219: "icta", 37684: "angani",    327972: "mawingu", 327997: "nodeafrica",    328652: "hirani", 328490: "unwired", 328475: "afriq",    37244: "dobie", 37305: "frontier",    328225: "strathmore", 328142: "eclectics", 327963: "geonet",    36904: "craft", 37354: "sawasawa",    327945: "ilri", 328301: "mla", 328192: "kpo",    37165: "webrunner", 328739: "kpa"}# default file with possible advisoriesdefault_file = "advisory_options.txt"script_path = os.path.realpath(__file__)directory = os.path.dirname(script_path)default_path = os.path.join(directory, default_file)# adv_options = get_advisories(default_file)operating_system = platform.system()def get_advisories(fname):    """    Produce a list of advisories based on an advisory text    """    with open(fname) as f:        options = f.readlines()    return [x.strip() for x in options]def open_with_csv(filename, d=","):    """    Open CSV file and retrun data in a list    """    data = []    with open(filename, encoding="utf-8-sig") as file_obj:        read_file = csv.reader(file_obj, delimiter=d)        for line in read_file:            data.append(line)    return datadef get_headings(filename, d=","):    """    Get headings from a CSV file    """    data_from_file = open_with_csv(filename, d)    # print(data_from_file[0])    return data_from_file[0]def get_index_of_asn(filename, d=","):    """    Get coloumn of asn field    """    # print(get_headings(filename, d).index("asn"))    headings = get_headings(filename, d)    if "asn" in headings:        return headings.index("asn")    elif "src_asn" in headings:        return headings.index("src_asn")    elif "ASN Number" in headings:        return headings.index("ASN Number")    elif "source.asn" in headings:        return headings.index("source.asn")def get_unique_asn_fields(filename, d=","):    """    Get unique values of asn field    """    data_from_file = open_with_csv(filename, d)    # print(data_from_file)    index_of_asn = get_index_of_asn(filename, d)    # return index_of_asn    list_of_asn = []    for line in data_from_file[1:]:        if not line:            continue        if (line[index_of_asn] != ""):            list_of_asn.append(line[index_of_asn])    set_of_asn = set(list_of_asn)    cprint("[!] INFO: There are " + str(len(set_of_asn)) + " events.", "green")    return set_of_asndef get_user_date():    """    Get user date    """    bool_choice = True    while (bool_choice):        cprint("[!] INFO: Documents will be named with today\'s date.",               "green")        custom_choice = input("Do you wish to use another date?(y/n)").lower()        if(custom_choice == "y" or custom_choice == "n"):            bool_choice = False        else:            cprint("\n[!!] Warning: Invalid choice", "yellow")    if(custom_choice == "y"):        user_date = input("Please enter the date (YYYY-MM-DD): ")        try:            year, month, day = map(int, user_date.split(("-")))            final_date = date(year, month, day).isoformat()        except ValueError:            cprint("[!!!] Error: Invalid format of date!", "red")            exit()        except UnboundLocalError:            exit("Come on!! Let\"s be serious here!!!")        if(year < 2018 or year > 2019):            cprint("[!!] Warning: You entered " +                   str(year) + " as the year!!", "yellow")            year_choice = input("Are you sure about the year?(y/n):").lower()            if(year_choice == "n"):                # final_date = time.strftime("%Y-%m-%d")`                pass            elif(year_choice == "y"):                try:                    final_date = date(year, month, day).isoformat()                except ValueError:                    print("Kindly months are from 1-12 and dates from 1-31")                    cprint(                        "[!!!] Error: Your input is not of YYYY-MM-DD format", "red")                    exit("Exiting..")    else:        cprint("[!] INFO: Using today\'s date!!", "green")        final_date = time.strftime("%Y-%m-%d")    return final_datedef write_one_file(document_path, data_from_file, index_asn, asn):    """    Write one file.    Example: 2019-06-20-botnet_drone-accesskenya.csv    """    with open(document_path, "w", newline="") as new_obj:        writer = csv.writer(new_obj)        writer.writerow(data_from_file[0])        for row in data_from_file[1:]:            if not row:                continue            if(row[index_asn] == str(asn)):                writer.writerow(row)def determine_filename_and_path(adv_date, advisory, as_number, parent_dir):    """    Determine the name and path of file to be written.    """    document_name = str(adv_date) + "-" + \        advisory + "-" + asn_names[as_number] + ".csv"    document_path = os.path.join(parent_dir, document_name)    return document_pathdef suggest_advisories(adv):    """    Suggest advisories incase user puts an incomplete advisory type.    """    pos_adv = get_advisories(default_path)    count = 0    if len([value for value in pos_adv if adv in value]) == 0:        cprint("[!!] Warning: Sorry nothing was found! :-(", "yellow")    else:        cprint("Did you mean:", "green")        for option in [value for value in pos_adv if adv in value]:            print(count + 1, option)            count += 1def print_success_messages(count=0):    """    Print how many advisories have been prepared.    """    if(count == 0):        pass    else:        cprint("[!] INFO: " + str(count) +               " advisories have been prepared.", "green")    cprint("[!] INFO: Success!", "green")def write_documents(fields, n_path, f_name, d_file, index_asn,                    date=time.strftime("%Y-%m-%d")):    """    Write actual files    """    report_date = date    count = 0    adv = input("What advisory are you working on? ")    if adv in get_advisories(default_path):        for f in fields:            if int(f) in asn_names:                document_path = determine_filename_and_path(                    report_date, adv, int(f), n_path)                try:                    write_one_file(document_path, d_file, index_asn, int(f))                except PermissionError:                    cprint(                        "[!!!] Error: A file can\'t be written."                        " It is probably open.",                        "red"                    )                    exit("Exiting ..... ")                count += 1        print_success_messages(count)    elif adv.isdigit():        cprint("[!!] Warning: Invalid entry. You entered a digit.", "yellow")        write_documents(fields, n_path, f_name, d_file, index_asn, date)    elif isinstance(adv, str):        suggest_advisories(adv)        write_documents(fields, n_path, f_name, d_file, index_asn, date)def print_permission_error_message():    """    Inform user that they don"t have enough permissions    to overwrite a directory and exit.    """    print(":-( :'-(")    print("[!] INFO: You don\'t have enough permissions to delete or"          "re-write these files.")    print("[!] INFO: Try deleting them without this program. Then re-run"          "the program.")    exit("Exiting...")def delete_advisories_folder(n_path):    """    Delete advisories folder    """    if(operating_system == "Windows"):        os.system("rmdir /S /Q " + n_path)        os.system("mkdir " + n_path)    else:        os.system("rm -f " + n_path + "/*")def overwrite(u_fields, n_path, fname, d_from_file, index_of_asn, date):    """    Overwrite a folder.    """    bool_option = True    cprint("[!!] Warning: You already created the summary files.", "yellow")    while (bool_option):        option = input("Do you want to re-write them?(y/n)").lower()        if(option == "y"):            bool_option = False            try:                delete_advisories_folder(n_path)                write_documents(u_fields, n_path,                                fname, d_from_file, index_of_asn, date)            except PermissionError:                print_permission_error_message()            # os.system("rmdir /S " + new_path)        elif(option == "n"):            bool_option = False            cprint("[!] INFO: Files remain the same.", "green")            exit(0)        else:            cprint("\n[!!] Invalid Input!!!", "yellow")            overwrite(u_fields, n_path, fname,                      d_from_file, index_of_asn, date)def make_new_directory(filename):    """    Make new directory to store advisory files.    """    file_directory = os.path.dirname(filename)    files_folder = str(filename) + "_files"    new_path = os.path.join(file_directory, files_folder)    Path(new_path).mkdir(parents=True, exist_ok=True)    return new_pathdef write_files(filename, date=time.strftime("%Y-%m-%d"), d=","):    """    Write the new files    """    data_from_file = open_with_csv(filename, d)    unique_fields = get_unique_asn_fields(filename, d)    index_of_asn = get_index_of_asn(filename, d)    new_path = make_new_directory(filename)    try:        write_documents(unique_fields, new_path,                        filename, data_from_file, index_of_asn, date)    except FileExistsError:        overwrite(unique_fields, new_path, filename,                  data_from_file, index_of_asn, date)def main():    if(len(sys.argv) >= 2):        for file in sys.argv[1:]:            cprint("\n[!] Working with file: " +                   str(os.path.basename(file)) + "\n", "green")            try:                report_date = get_user_date()                write_files(os.path.abspath(file), report_date)            except IndexError:                cprint(                    "[!!!] Error: Please specify a file: splitfiles.py <file>", "red")            except FileNotFoundError:                cprint("[!!!] Error: \" " + str(os.path.abspath(file)) +                       " \"" + " doesn\"t seem to exist.", "red")            except UnicodeDecodeError:                cprint("[!!!] Error: Your chosen file is not a csv.\n", "red")    else:        cprint("[!!!] Error: You did not specify a file.", "red")        exit("Exiting...")if __name__ == "__main__":    main()